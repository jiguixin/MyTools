<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exception_NotFoundAuthorizedCode" xml:space="preserve">
    <value>没有获取到认证Code</value>
  </data>
  <data name="SysConfig_AuthorizedCodeXPath" xml:space="preserve">
    <value>/html/body/div[@class='content']/div[2]/div[@class='copy-code']/input</value>
    <comment>用于该XPATH获取在淘宝认证界面的AuthorizedCode</comment>
  </data>
  <data name="ExceptionTemplate_MethedParameterIsNullorEmpty" xml:space="preserve">
    <value>在 [{0}] 方法中参数不能为空</value>
    <comment>异常模版，在 [{0}] 方法中参数 不能为空</comment>
  </data>
  <data name="SysConfig_AuthorizeUrl" xml:space="preserve">
    <value>http://open.taobao.com/authorize/?appkey={0}</value>
    <comment>，需要传入appKey</comment>
  </data>
  <data name="SysConfig_RealTaobaoServerUrl" xml:space="preserve">
    <value>http://gw.api.taobao.com/router/rest</value>
    <comment>淘宝真实环境URL</comment>
  </data>
  <data name="SysConfig_GetBanggoProductBrandCodeXPath" xml:space="preserve">
    <value>/html/body/div/div[@class='details_dir']/a[2]</value>
    <comment>得到banggo产品的品牌</comment>
  </data>
  <data name="Exception_XPathGetDataError" xml:space="preserve">
    <value>通过该XPATH没有获取到正确的数据,{0}</value>
    <comment>通过该XPATH没有获取到正确的数据</comment>
  </data>
  <data name="SysConfig_GetBanggoProductCategoryXPath" xml:space="preserve">
    <value>/html/body/div/div[@class='details_dir']/a[3]</value>
    <comment>获得产品详细界面的类别，如，男装、女装.</comment>
  </data>
  <data name="SysConfig_GetBanggoProductCatalogXPath" xml:space="preserve">
    <value>/html/body/div/div[@class='details_dir']/a[5]</value>
    <comment>获得产品详情的商品目录</comment>
  </data>
  <data name="SysConfig_GetBanggoProductParentCatalogXPath" xml:space="preserve">
    <value>/html/body/div/div[@class='details_dir']/a[4]</value>
    <comment>得到banggo的父目录，如 T恤</comment>
  </data>
  <data name="SysConfig_ItemWeight" xml:space="preserve">
    <value>0.2</value>
    <comment>商品重量</comment>
  </data>
  <data name="SysConfig_PostFee" xml:space="preserve">
    <value>12</value>
    <comment>平邮费用</comment>
  </data>
  <data name="SysConfig_ExpressFee" xml:space="preserve">
    <value>12</value>
    <comment>快递费用</comment>
  </data>
  <data name="SysConfig_EmsFee" xml:space="preserve">
    <value>25</value>
    <comment>EMS 费用</comment>
  </data>
  <data name="SysConfig_DeliveryTemplateName" xml:space="preserve">
    <value>2013运费模板</value>
    <comment>快递模版名字</comment>
  </data>
  <data name="SysConfig_GetDataByApi" xml:space="preserve">
    <value>Api</value>
    <comment>通过API获得淘宝相关数据</comment>
  </data>
  <data name="SysConfig_GetDataByLocal" xml:space="preserve">
    <value>Local</value>
    <comment>通过本地数据库得到相应数据</comment>
  </data>
  <data name="SysConfig_GetDataWay" xml:space="preserve">
    <value>Api</value>
    <comment>得到数据的方式</comment>
  </data>
  <data name="SysConfig_METERSBONWE_BrandProp" xml:space="preserve">
    <value>2000:29504;</value>
    <comment>美特斯邦威 品牌，对应的淘宝属性串</comment>
  </data>
  <data name="SysConfig_ProductCodeProp" xml:space="preserve">
    <value>1632501</value>
    <comment>在淘宝上货号对应的编码</comment>
  </data>
  <data name="SysConfig_GetGoodsModeImgGreyXPath" xml:space="preserve">
    <value>//*[@id='goods_model']//img[@src='http://s.mb-go.com/pub7/style/images/grey.gif']</value>
    <comment>得到产品描述下，所以的grey.gif图片结点，用于修改src值</comment>
  </data>
  <data name="Log_PublishGoodsSuccess" xml:space="preserve">
    <value>发布产品：{0} 已发布成功。numId:{1}</value>
    <comment>发布的产品成功信息</comment>
  </data>
  <data name="Log_PublishSaleImgSuccess" xml:space="preserve">
    <value>上传销售图片：成功。numId:{0},图片地址:{1}</value>
    <comment>上传销售图片：成功</comment>
  </data>
  <data name="Log_PublishSaleImgFailure" xml:space="preserve">
    <value>上传销售图片：失败。</value>
    <comment>上传销售图片：失败</comment>
  </data>
  <data name="SysConfig_GetGoodsPriceByBanggoUrl" xml:space="preserve">
    <value>http://act.banggo.com/Price/getGoodsPrice?r={0}&amp;callback=&amp;goods_sn={1}</value>
    <comment>获取banggo的产品价格信息地址</comment>
  </data>
  <data name="SysConfig_GetProductByBanggoAvailableColorUrl" xml:space="preserve">
    <value>http://act.banggo.com/Ajax/cartAjax?time={0}&amp;ajaxtype=color_size&amp;type=color&amp;code={1}&amp;r_code=&amp;goods_sn={2}</value>
    <comment>获取该颜色下还有那些尺码</comment>
  </data>
  <data name="SysConfig_GetProductByBanggoAvailableSizeUrl" xml:space="preserve">
    <value>http://act.banggo.com/Ajax/cartAjax?time={0}&amp;ajaxtype=color_size&amp;type=size&amp;code={1}&amp;r_code={2}&amp;goods_sn={3}</value>
    <comment>得到改颜色和尺码还有多少库存</comment>
  </data>
  <data name="SysConfig_GetMarketPriceXPath" xml:space="preserve">
    <value>div[@class='goods_price']/del</value>
    <comment>获取市场价的XPATH</comment>
  </data>
  <data name="SysConfig_GetSalesVolumeXPath" xml:space="preserve">
    <value>div[@class='sales']/p/strong[@class='red']/a</value>
    <comment>得到总销量的XPATH语法</comment>
  </data>
  <data name="SysConfig_GetSvipPriceId" xml:space="preserve">
    <value>svip_price</value>
    <comment>svip 价格结点的ID名</comment>
  </data>
  <data name="SysConfig_GetVipPriceId" xml:space="preserve">
    <value>vip_price</value>
    <comment>vip 价格结点的ID</comment>
  </data>
  <data name="SysConfig_GetSalePriceId" xml:space="preserve">
    <value>sale_price</value>
    <comment>售价结点对应的ID</comment>
  </data>
  <data name="SysConfig_ColorListId" xml:space="preserve">
    <value>read_colorlist</value>
    <comment>颜色对应的结点ID</comment>
  </data>
  <data name="SysConfig_SizeListId" xml:space="preserve">
    <value>read_sizelist</value>
    <comment>大小对应的结点id</comment>
  </data>
  <data name="SysConfig_GoodsDescId" xml:space="preserve">
    <value>goods_model</value>
    <comment>产品描述的ID</comment>
  </data>
  <data name="SysConfig_GetGoodsSnByUrlRegex" xml:space="preserve">
    <value>\d{6}</value>
    <comment>根据URL地址得到款号的的正则表达式</comment>
  </data>
  <data name="SysConfig_ME-CITY_BrandProp" xml:space="preserve">
    <value>2000:4146697;</value>
    <comment>ME-CITY 品牌，对应的淘宝属性串</comment>
  </data>
  <data name="SysConfig_GetProductInfoImgGreyXPath" xml:space="preserve">
    <value>//*[@id='productinfo_div']//img[@src='http://s.mb-go.com/pub7/style/images/grey.gif']</value>
    <comment>获得产品描述中grey.git的图片，该描述模版id是productinfo_div </comment>
  </data>
  <data name="SysConfig_ProductInfoId" xml:space="preserve">
    <value>productinfo_div</value>
    <comment>产品描述ID</comment>
  </data>
  <data name="Log_GoodsAlreadyExist" xml:space="preserve">
    <value>GoodsSn:{0}-&gt;已经存在!</value>
    <comment>该商品已经存在!</comment>
  </data>
  <data name="Exception_UrlInvalid" xml:space="preserve">
    <value>产入的Url无效</value>
    <comment>URL 无效</comment>
  </data>
  <data name="SysConfig_GetMarketPriceId" xml:space="preserve">
    <value>market_price</value>
    <comment>banggo 市场的ID</comment>
  </data>
  <data name="SysConfig_Sku" xml:space="preserve">
    <value>Sku</value>
    <comment>SKU 名字常量</comment>
  </data>
  <data name="Log_UpdateGoodsSuccess" xml:space="preserve">
    <value>更新产品：{0} 已更新成功。numId:{1}</value>
    <comment>更新产品 成功</comment>
  </data>
  <data name="Log_PublishGoodsFailure" xml:space="preserve">
    <value>发布产品：{0} 发布失败</value>
    <comment>发布产品失败</comment>
  </data>
  <data name="Log_UpdateGoodsFailure" xml:space="preserve">
    <value>更新产品：更新失败。numId:{0};GoodsSn:{1}</value>
    <comment>更新商品失败</comment>
  </data>
  <data name="Log_PublishGoodsing" xml:space="preserve">
    <value>{0}-&gt;正在发布...</value>
    <comment>正在发布商品</comment>
  </data>
  <data name="Log_UpdateGoodsing" xml:space="preserve">
    <value>NumIid:{0};GoodsSn:{1}-&gt;正在更新...</value>
    <comment>正在更新</comment>
  </data>
  <data name="Log_PublishSaleImging" xml:space="preserve">
    <value>NumlId:{0}-&gt;正在上传销售图片...</value>
    <comment>正在上传销售图片...</comment>
  </data>
  <data name="Log_GetOnSaleGoodsFailure" xml:space="preserve">
    <value>得到在售商品出错</value>
    <comment>得到在售商品出错</comment>
  </data>
  <data name="Log_GetInventoryGoodsFailure" xml:space="preserve">
    <value>得到卖家仓库中的商品出错</value>
    <comment>得到卖家仓库中的商品出错</comment>
  </data>
  <data name="Log_GoodsDelistingFailure" xml:space="preserve">
    <value>NumId:{0} -&gt;产品下架失败</value>
    <comment>产品下架失败</comment>
  </data>
  <data name="Log_GoodsDelisting" xml:space="preserve">
    <value>NumlId:{0}-&gt;正在下架...</value>
    <comment>正在下架...</comment>
  </data>
  <data name="Log_GoodsDelistingSuccess" xml:space="preserve">
    <value>NumlId:{0}-&gt;下架成功</value>
    <comment>下架成功</comment>
  </data>
  <data name="Log_GetGoodsListFailure" xml:space="preserve">
    <value>得到产品列表失败</value>
    <comment>得到产品列表失败</comment>
  </data>
  <data name="Log_DeleteGoodsSkuing" xml:space="preserve">
    <value>正在执行删除SKU..，numId：{0}; properties:{1}</value>
    <comment>正在执行删除SKU..</comment>
  </data>
  <data name="Log_DeleteGoodsSkuFailure" xml:space="preserve">
    <value>删除SKU失败，numId：{0}; properties:{1}</value>
    <comment>删除SKU失败</comment>
  </data>
  <data name="Log_DeleteGoodsSkuSuccess" xml:space="preserve">
    <value>删除SKU成功，numId：{0}; properties:{1}</value>
    <comment>删除SKU成功</comment>
  </data>
  <data name="Log_GetSkusing" xml:space="preserve">
    <value>正在获取SKU...：numIds:{0}</value>
    <comment>正在获取SKU</comment>
  </data>
  <data name="Log_GetSkusFailure" xml:space="preserve">
    <value>获取SKU出错：numIds:{0}</value>
    <comment>获取SKU出错</comment>
  </data>
  <data name="Log_GetSkusSuccess" xml:space="preserve">
    <value>获取SKU成功：numIds:{0}</value>
    <comment>获取SKU成功</comment>
  </data>
  <data name="Log_StockEqualNotUpdate" xml:space="preserve">
    <value>库存相同，不进行更新;-&gt;NumId:{0};GoodsSn:{1};</value>
    <comment>库存相同，不进行更新</comment>
  </data>
  <data name="Log_ExportProductColorForExceling" xml:space="preserve">
    <value>GoodsSn:{0}-&gt;正在导出Banggo库存数据....</value>
    <comment>正在导出Banggo库存数据</comment>
  </data>
  <data name="Log_ExportProductColorForExcelSuccess" xml:space="preserve">
    <value>GoodsSn:{0}-&gt;导出Banggo库存数据成功!</value>
    <comment>导出Banggo库存数据成功</comment>
  </data>
  <data name="Log_GetRivalDetailsing" xml:space="preserve">
    <value>正在获取：[{0}] 的销售数据</value>
    <comment>正在获取：[{0}] 的销售数据</comment>
  </data>
  <data name="Log_GetRivalDetailsSuccess" xml:space="preserve">
    <value>获取：[{0}] 的销售数据完成</value>
    <comment>获取：[{0}] 的销售数据完成</comment>
  </data>
  <data name="Log_ExportRivalGoodsInfoing" xml:space="preserve">
    <value>query:{0}-&gt;正在导出该产品所有对手的销售数据....</value>
    <comment>正在导出该产品所有对手的销售数据</comment>
  </data>
  <data name="Log_ExportRivalGoodsInfoSuccess" xml:space="preserve">
    <value>query:{0}-&gt;导出该产品所有对手的销售数据成功!</value>
    <comment>导出该产品所有对手的销售数据成功!
</comment>
  </data>
  <data name="Log_ExportSingleRivalGoodsInfoSuccess" xml:space="preserve">
    <value>成功导出：[{0}] 有销售数！</value>
    <comment>成功导出：[{0}] 有销售数！</comment>
  </data>
  <data name="Log_ExportBanggoAndTaobaoGoodsInfoBySearchFailure" xml:space="preserve">
    <value>GoodsSn:{0}-&gt;导Banggo库存数据与淘宝对手销售数据出错!</value>
    <comment>导Banggo库存数据与淘宝对手销售数据出错!</comment>
  </data>
  <data name="Log_GetOnSaleGoodsing" xml:space="preserve">
    <value>Query:{0}-&gt;正在获取在售产品...</value>
    <comment>正在获取在售产品...</comment>
  </data>
  <data name="Log_GetOnSaleGoodsSuccess" xml:space="preserve">
    <value>Query:{0}-&gt;获取在售产品成功</value>
    <comment>获取在售产品成功
</comment>
  </data>
  <data name="Log_UnableGetMallSaleData" xml:space="preserve">
    <value>对手名：{0} -&gt; 该用户为商城卖家不能获取其销量数据!</value>
    <comment>该用户为商城卖家不能获取其销量数据!</comment>
  </data>
  <data name="Log_InsertRivalGoodsInfoFailure" xml:space="preserve">
    <value>插入对手销售数据出错!-&gt;对手名：{0}</value>
    <comment>插入对手销售数据出错!-&gt;对手名：{0}
</comment>
  </data>
  <data name="Log_StuffProductInfoing" xml:space="preserve">
    <value>GoodsSn:{0}-&gt;正在将banggo的产品信息填充到taobao实体类中...</value>
    <comment>正在将banggo的产品信息填充到taobao实体类中...</comment>
  </data>
  <data name="Log_StuffProductInfoSuccess" xml:space="preserve">
    <value>GoodsSn:{0}-&gt;将banggo的产品信息填充到taobao实体类中完成!</value>
    <comment>将banggo的产品信息填充到taobao实体类中完成</comment>
  </data>
</root>